apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-pvc
  namespace: demo
  labels:
    app: my-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-config
  namespace: demo
  labels:
    app: my-app
data:
  app.properties: |
    greeting.message=Hello, World!
    app.version=1.0.0
---
apiVersion: v1
kind: Secret
metadata:
  name: my-secret
  namespace: demo
  labels:
    app: my-app
type: Opaque
data:
  username: dXNlcg==
  password: cGFzc3dvcmQ= 
---
apiVersion: v1
kind: Service
metadata:
  name: my-service
  namespace: demo
  labels:
    app: my-app
spec:
  selector:
    app: my-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-serviceaccount
  namespace: demo
  labels:
    app: my-app
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-role
  namespace: demo
  labels:
    app: my-app
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["create", "list", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-rolebinding
  namespace: demo
  labels:
    app: my-app
subjects:
  - kind: ServiceAccount
    name: my-serviceaccount
    namespace: demo
roleRef:
  kind: Role
  name: my-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubestash-backup-job
  namespace: demo
  labels:
    app: my-app
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["create", "list", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubestash-backup-job-rolebinding
  namespace: demo
  labels:
    app: my-app
subjects:
  - kind: ServiceAccount
    name: my-serviceaccount
    namespace: demo
roleRef:
  kind: Role
  name: kubestash-backup-job
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubestash-retention-policy-job
  namespace: demo
  labels:
    app: my-app
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["create", "list", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubestash-retention-policy-job-rolebinding
  namespace: demo
  labels:
    app: my-app
subjects:
  - kind: ServiceAccount
    name: my-serviceaccount
    namespace: demo
roleRef:
  kind: Role
  name: kubestash-retention-policy-job
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-clusterrole
  labels:
    app: my-app
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["create", "get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-clusterrolebinding
  labels:
    app: my-app
subjects:
  - kind: ServiceAccount
    name: my-serviceaccount
    namespace: demo
roleRef:
  kind: ClusterRole
  name: my-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-app
  namespace: demo
  labels:
    app: my-app
spec:
  serviceName: "my-service" 
  replicas: 2
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      serviceAccountName: my-serviceaccount
      containers:
        - name: my-container
          image: nginx:latest
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: secret-volume
              mountPath: /etc/secret
            - name: storage-volume
              mountPath: /data
      volumes:
        - name: config-volume
          configMap:
            name: my-config
        - name: secret-volume
          secret:
            secretName: my-secret
        - name: storage-volume
          persistentVolumeClaim:
            claimName: my-pvc
  volumeClaimTemplates: 
    - metadata:
        name: storage-volume
        labels:
          app: my-app
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 5Gi 